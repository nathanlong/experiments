var r=Object.defineProperty;var h=(e,t,s)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var i=(e,t,s)=>(h(e,typeof t!="symbol"?t+"":t,s),s);import"../modulepreload-polyfill-9p4a8sJU.js";const n=(e,t)=>{let s=null;return(...o)=>{window.clearTimeout(s),s=window.setTimeout(()=>{e.apply(null,o)},t)}};class l{constructor(t){i(this,"intersect",t=>{t.forEach(s=>{s.isIntersecting&&(this.initSVG(),this.observer.unobserve(s.target))})});i(this,"handleClick",t=>{t.target.closest('[data-module="tracker"]')&&(this.scaleOverride=!0)});i(this,"handleScroll",()=>{this.debouncedMeasure()});i(this,"handleMouse",t=>{this.mouse.x=t.clientX,this.mouse.y=t.clientY});i(this,"debouncedMeasure",n(()=>this.measure(),250));this.el=t,this.speed=.05,this.scaleMax=3,this.scaleMin=1,this.scaleConstant=400,this.scaleSpeed=.1,this.bounds=null,this.buttonBounds=null,this.xStart=null,this.yStart=null,this.mouse={x:null,y:null},this.pos={x:null,y:null},this.diff={x:null,y:null},this.buttonCenter={x:null,y:null},this.distance=null,this.scaleDiff=null,this.scaleOverride=null,this.currentScale=0,this.radius=this.el.dataset.radius??100,this.color=this.el.dataset.color??"white",this.stroke=this.el.dataset.stroke??"transparent",this.strokeWidth=this.el.dataset.strokeWidth??0,this.target=this.el.querySelector("[data-target]"),this.connect()}connect(){const t={root:null,threshold:0};this.observer=new IntersectionObserver(this.intersect,t),this.observer.observe(this.el)}initSVG(){this.measure(),this.xStart=this.bounds.width/2,this.yStart=this.bounds.height/2,this.mouse={x:this.xStart,y:this.yStart},this.pos={x:this.xStart,y:this.yStart},window.addEventListener("mousemove",this.handleMouse),window.addEventListener("scroll",this.handleScroll),window.addEventListener("click",this.handleClick),this.drawCursor(),this.loop()}measure(){this.bounds=this.el.getBoundingClientRect(),this.buttonBounds=this.target.getBoundingClientRect(),this.buttonCenter.x=this.buttonBounds.left+this.buttonBounds.width/2,this.buttonCenter.y=this.buttonBounds.top+this.buttonBounds.height/2}setParamsDiffs(){this.diff.x=this.mouse.x-this.pos.x,this.diff.y=this.mouse.y-this.pos.y-this.bounds.top,this.pos.x+=this.diff.x*this.speed,this.pos.y+=this.diff.y*this.speed,this.distance=parseFloat(Math.hypot(this.pos.x-this.buttonCenter.x,this.pos.y-this.buttonCenter.y).toFixed(1)),this.scaleTarget=Math.min(this.scaleMax,Math.max(this.scaleMin,this.scaleConstant/this.distance));const t=this.scaleTarget>this.currentScale?this.currentScale+=this.scaleSpeed:this.currentScale-=this.scaleSpeed,s=this.scaleOverride?this.currentScale*2.5:t;this.scale=`scale(${s})`,this.currentScale=s,this.scaleOverride&&(this.scaleOverride=!1)}drawCursor(){this.widthContainer=this.el.offsetWidth,this.heightContainer=this.el.offsetHeight,this.cursorSVG=`<svg
      width="${this.widthContainer}"
      height="${this.heightContainer}"
      viewbox="0 0 ${this.widthContainer} ${this.heightContainer}"
      preserveAspectRatio="${this.preserveAspectRatio||"none"}"
      style="background: none; position: absolute; inset: 0; pointer-events: none; ">
        <g class="cta-cursor">
          <circle
            r=${this.radius}
            cx=${this.pos.x}
            cy=${this.pos.y}
            fill="${this.color}"
            fill-opacity="1"
            stroke="${this.stroke}"
            stroke-width="${this.strokeWidth}"
            stroke-opacity="1"
            vector-effect="non-scaling-stroke"
            style="transform-origin: ${this.pos.x}px ${this.pos.y}px; transition: transform 250ms linear;">
          </circle>
      </g>
    </svg>`,this.el.insertAdjacentHTML("beforeend",this.cursorSVG),this.svg=this.el.querySelector("svg"),this.cursor=this.el.querySelectorAll(".cta-cursor circle")}setCursor(){for(const[t,s]of this.cursor.entries())s.setAttribute("cx",this.pos.x),s.setAttribute("cy",this.pos.y),s.style.transformOrigin=`${this.pos.x}px ${this.pos.y}px`,s.style.transform=this.scale}loop(){this.setParamsDiffs(),this.setCursor(),this.loopReq=requestAnimationFrame(()=>this.loop())}disconnect(){this.observer.disconnect(),this.svg.remove(),cancelAnimationFrame(this.loopReq),window.removeEventListener("mousemove",this.handleMouse),window.removeEventListener("scroll",this.handleScroll),window.removeEventListener("click",this.handleClick)}}const a=document.querySelector('[data-module="tracker"]');new l(a);
