/* CSS Animations and Transitions are turned on and off by the setting of two
 * CSS variables. No js is required for this to work on page load, so if there
 * is no toggle control and only CSS animations, this would be all you need.
 * There are more notes in the JS source on how to work with the toggle to
 * manage and override the default state by user preference. */

:root {
  /* this var controls transitions through combining it with calc() for the duration definition */
  --transition-toggle: 0;
  /* this var controls animations through setting the animation-play-state property: */
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state */
  --play-state: paused;
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    "Open Sans",
    "Helvetica Neue",
    sans-serif;
}

/* opt-in to motion, sets active states */
@media (prefers-reduced-motion: no-preference) {
  :root {
    --transition-toggle: 1;
    --play-state: running;
  }
}

/* CSS Animations */

.css-anim {
  animation: floating 10000ms ease-in-out infinite;
  /* here we tie the play state to the variable we defined earlier */
  animation-play-state: var(--play-state);
  background-color: #f72585;
  border-radius: 100%;
  height: 75px;
  position: relative;
  width: 75px;
}

.css-anim .eye-left,
.css-anim .eye-right {
  animation: blinking 7000ms infinite reverse;
  background-color: #fff;
  border-radius: 100%;
  height: 7px;
  position: absolute;
  width: 7px;
}

.css-anim .eye-left {
  top: 50%;
  left: 13%;
}

.css-anim .eye-right {
  top: 50%;
  right: 13%;
}

@keyframes floating {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-50%);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes blinking {
  0% {
    transform: scaleY(1);
  }
  99% {
    transform: scaleY(1);
  }
  100% {
    transform: scaleY(0);
  }
}

/* CSS Transitions */

.transition-anim {
  width: 75px;
  height: 75px;
  border-radius: 100%;
  background-color: #7209b7;
  position: relative;
  /* Using calc against the custom variable as a duration will result in either
   * 0 (no animation) or the actual duration */
  transition: transform calc(var(--transition-toggle) * 5s);
}

.transition-anim:hover {
  transform: matrix(0, 1, 1, 0, 0, 0);
}

.transition-anim .eye-left,
.transition-anim .eye-right {
  position: absolute;
  width: 7px;
  height: 7px;
  background-color: #fff;
}

.transition-anim .eye-left {
  top: 50%;
  left: 13%;
}

.transition-anim .eye-right {
  top: 50%;
  right: 13%;
}

/* WAAPI Animations - see JS source for notes */

.waapi-anim {
  width: 75px;
  height: 75px;
  border-radius: 100%;
  background-color: #480ca8;
  position: relative;
}

.waapi-anim .eye-left,
.waapi-anim .eye-right {
  position: absolute;
  color: #fff;
  font-size: 16px;
  top: 40%;
}

.waapi-anim .eye-left {
  left: 13%;
}

.waapi-anim .eye-right {
  right: 13%;
}

/* GSAP animation - see JS source for notes */

.gsap-anim {
  width: 75px;
  height: 75px;
  border-radius: 100%;
  background-color: #4361ee;
  position: relative;
}

.gsap-anim .eye-left,
.gsap-anim .eye-right {
  position: absolute;
  width: 10px;
  height: 10px;
  border-radius: 100%;
  background-color: #fff;
}

.gsap-anim .eye-left {
  top: 50%;
  left: 20%;
}

.gsap-anim .eye-right {
  top: 50%;
  right: 20%;
}

/* Minor scaffolding, not related to the demo */

.toggle-wrapper {
  text-align: center;
  margin-top: 10vh;
}

.grid {
  margin-top: 10vh;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.grid-fr {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container {
  max-width: 600px;
  margin: 0 auto;
}

.mt-rando {
  margin-top: 10vh;
}
